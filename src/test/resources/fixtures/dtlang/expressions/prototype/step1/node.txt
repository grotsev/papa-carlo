 > create:
atom:2
<<<seq (
  let (x, 5+1*2)
)>>>


 > create:
call:3
seq <<<(
  let (x, 5+1*2)
)>>>


 > create:
expr:4 cachable
seq (
  <<<let (x, 5+1*2)>>>
)


 > create:
atom:5
seq (
  <<<let (x, 5+1*2)>>>
)


 > create:
call:6
seq (
  let <<<(x, 5+1*2)>>>
)


 > create:
expr:7 cachable
seq (
  let (<<<x>>>, 5+1*2)
)


 > create:
atom:8
seq (
  let (<<<x>>>, 5+1*2)
)


 > create:
path:9
seq (
  let (<<<x>>>, 5+1*2)
)


 > create:
segment:10
seq (
  let (<<<x>>>, 5+1*2)
)


 > create:
expr:11 cachable
seq (
  let (x, <<<5+1*2>>>)
)


 > create:
+:12
seq (
  let (x, 5<<<+>>>1*2)
)


 > create:
atom:13
seq (
  let (x, <<<5>>>+1*2)
)


 > create:
*:14
seq (
  let (x, 5+1<<<*>>>2)
)


 > create:
atom:15
seq (
  let (x, 5+<<<1>>>*2)
)


 > create:
atom:16
seq (
  let (x, 5+1*<<<2>>>)
)


 > create:
path:17
seq (
  <<<let>>> (x, 5+1*2)
)


 > create:
segment:18
seq (
  <<<let>>> (x, 5+1*2)
)


 > create:
path:19
<<<seq>>> (
  let (x, 5+1*2)
)


 > create:
segment:20
<<<seq>>> (
  let (x, 5+1*2)
)


 > merge:
expr 1 {
  result: atom 2 >> 1 {
    call: call 3 >> 2 {
      expr: expr 4 cachable >> 3 {
        result: atom 5 >> 4 {
          call: call 6 >> 5 {
            expr: expr 7 cachable >> 6 {
              result: atom 8 >> 7 {
                path: path 9 >> 8 {
                  segment: segment 10 >> 9 {
                    name: x
                  }
                }
              }
            }
            expr: expr 11 cachable >> 6 {
              result: + 12 >> 11 {
                left: atom 13 >> 12
                right: * 14 >> 12 {
                  left: atom 15 >> 14
                  right: atom 16 >> 14
                }
              }
            }
          }
          path: path 17 >> 5 {
            segment: segment 18 >> 17 {
              name: let
            }
          }
        }
      }
    }
    path: path 19 >> 2 {
      segment: segment 20 >> 19 {
        name: seq
      }
    }
  }
}

